<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190719 23:00:29.132" generator="Robot 3.1.2 (Python 2.7.15+ on linux2)">
<suite id="s1" name="T 001 GREETING &amp; T 002 USER">
<suite source="/home/diogo/Documents/docker/restapi-java-docker/tests/T_001_GREETING.robot" id="s1-s1" name="T 001 GREETING">
<kw type="setup" name="Initiate Session">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>api</arg>
<arg>${BASE_URL}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.466" level="INFO">Creating Session using : alias=api, url=http://localhost:5000/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190719 23:00:29.467" starttime="20190719 23:00:29.466"></status>
</kw>
<kw name="Start Log" library="log">
<status status="PASS" endtime="20190719 23:00:29.472" starttime="20190719 23:00:29.468"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.472" starttime="20190719 23:00:29.465"></status>
</kw>
<test id="s1-s1-t1" name="TC_001_GET_ALL_GREETING">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.503" level="INFO">Get Request using : alias=api, uri=greeting, headers=None json=None</msg>
<msg timestamp="20190719 23:00:29.504" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.504" starttime="20190719 23:00:29.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.506" starttime="20190719 23:00:29.504"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.507" starttime="20190719 23:00:29.506"></status>
</kw>
<doc>Testing the endpoint GET /greeting that returns all greetings inside the service</doc>
<tags>
<tag>GET</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.507" critical="yes" starttime="20190719 23:00:29.473"></status>
</test>
<test id="s1-s1-t2" name="TC_002_GET_GREETING">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${ID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.517" level="INFO">Get Request using : alias=api, uri=greeting/1, headers=None json=None</msg>
<msg timestamp="20190719 23:00:29.517" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.517" starttime="20190719 23:00:29.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.519" starttime="20190719 23:00:29.518"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.521" starttime="20190719 23:00:29.520"></status>
</kw>
<doc>Testing the endpoint GET /greeting/:id that returns the greeting with id=:id</doc>
<tags>
<tag>GET</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.521" critical="yes" starttime="20190719 23:00:29.508"></status>
</test>
<test id="s1-s1-t3" name="TC_003_POST_NEW_GREETING">
<kw name="Form data">
<doc>Creates a dictionary with the ${info} passed as argument</doc>
<arguments>
<arg>teste</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>message=${info}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.529" level="INFO">&amp;{data} = { message=teste }</msg>
<status status="PASS" endtime="20190719 23:00:29.530" starttime="20190719 23:00:29.527"></status>
</kw>
<msg timestamp="20190719 23:00:29.530" level="INFO">&amp;{data} = { message=teste }</msg>
<status status="PASS" endtime="20190719 23:00:29.530" starttime="20190719 23:00:29.526"></status>
</kw>
<kw name="Form headers">
<doc>Creates a dictionary with the headers needed for the requests</doc>
<assign>
<var>&amp;{headers}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/x-www-form-urlencoded</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.532" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.532" starttime="20190719 23:00:29.531"></status>
</kw>
<msg timestamp="20190719 23:00:29.533" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.533" starttime="20190719 23:00:29.531"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.541" level="INFO">Post Request using : alias=api, uri=greeting, data=message=teste, headers={u'Content-Type': u'application/x-www-form-urlencoded'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.541" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.541" starttime="20190719 23:00:29.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.542" starttime="20190719 23:00:29.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.544" level="INFO">To JSON using : content={"message":"teste"} </msg>
<msg timestamp="20190719 23:00:29.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.545" level="INFO">${response_data} = {u'message': u'teste'}</msg>
<status status="PASS" endtime="20190719 23:00:29.545" starttime="20190719 23:00:29.544"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>teste</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.545" starttime="20190719 23:00:29.545"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.548" starttime="20190719 23:00:29.546"></status>
</kw>
<doc>Testing the endpoint POST /greeting that adds a new message to the service</doc>
<tags>
<tag>POST</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.548" critical="yes" starttime="20190719 23:00:29.522"></status>
</test>
<test id="s1-s1-t4" name="TC_004_PUT_GREETING">
<kw type="setup" name="Create greeting">
<doc>Used to create a fake entry in the service in order to test the DELETE and PUT endpoints</doc>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.554" level="INFO">Post Request using : alias=api, uri=greeting/1000, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:29.555" starttime="20190719 23:00:29.550"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.555" starttime="20190719 23:00:29.550"></status>
</kw>
<kw name="Form data">
<doc>Creates a dictionary with the ${info} passed as argument</doc>
<arguments>
<arg>newMessage</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>message=${info}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.557" level="INFO">&amp;{data} = { message=newMessage }</msg>
<status status="PASS" endtime="20190719 23:00:29.557" starttime="20190719 23:00:29.557"></status>
</kw>
<msg timestamp="20190719 23:00:29.558" level="INFO">&amp;{data} = { message=newMessage }</msg>
<status status="PASS" endtime="20190719 23:00:29.558" starttime="20190719 23:00:29.556"></status>
</kw>
<kw name="Form headers">
<doc>Creates a dictionary with the headers needed for the requests</doc>
<assign>
<var>&amp;{headers}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/x-www-form-urlencoded</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.562" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.562" starttime="20190719 23:00:29.559"></status>
</kw>
<msg timestamp="20190719 23:00:29.563" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.563" starttime="20190719 23:00:29.559"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.570" level="INFO">Put Request using : alias=api, uri=greeting/1000, data=message=newMessage,                     headers={u'Content-Type': u'application/x-www-form-urlencoded'}, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.570" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.570" starttime="20190719 23:00:29.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.571" starttime="20190719 23:00:29.570"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.572" level="INFO">To JSON using : content={"1000":"newMessage"} </msg>
<msg timestamp="20190719 23:00:29.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.572" level="INFO">${response_data} = {u'1000': u'newMessage'}</msg>
<status status="PASS" endtime="20190719 23:00:29.572" starttime="20190719 23:00:29.571"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>newMessage</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.572" starttime="20190719 23:00:29.572"></status>
</kw>
<kw type="teardown" name="Delete greeting">
<doc>Used to delete the fake entry in the service</doc>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.579" level="INFO">Delete Request using : alias=api, uri=greeting/1000, data=None,                     headers=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:29.579" starttime="20190719 23:00:29.573"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.579" starttime="20190719 23:00:29.573"></status>
</kw>
<doc>Testing the endpoint PUT /greeting/:id that changes the message (sent as Form data) from the key with id=:id</doc>
<tags>
<tag>PUT</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.580" critical="yes" starttime="20190719 23:00:29.549"></status>
</test>
<test id="s1-s1-t5" name="TC_005_DELETE_GREETING">
<kw type="setup" name="Create greeting">
<doc>Used to create a fake entry in the service in order to test the DELETE and PUT endpoints</doc>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.589" level="INFO">Post Request using : alias=api, uri=greeting/1000, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:29.589" starttime="20190719 23:00:29.583"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.589" starttime="20190719 23:00:29.583"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.593" level="INFO">Delete Request using : alias=api, uri=greeting/1000, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.593" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.593" starttime="20190719 23:00:29.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.594" starttime="20190719 23:00:29.593"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.596" starttime="20190719 23:00:29.594"></status>
</kw>
<doc>Testing the endpoint DELETE /greeting/:id that deletes the message the key :id</doc>
<tags>
<tag>DELETE${info}</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.596" critical="yes" starttime="20190719 23:00:29.581"></status>
</test>
<test id="s1-s1-t6" name="TC_006_INVALID_ROUTE">
<kw type="setup" name="Create greeting">
<doc>Used to create a fake entry in the service in order to test the DELETE and PUT endpoints</doc>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.605" level="INFO">Post Request using : alias=api, uri=greeting/1000, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:29.605" starttime="20190719 23:00:29.599"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.605" starttime="20190719 23:00:29.597"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>xpto</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.614" level="INFO">Get Request using : alias=api, uri=xpto, headers=None json=None</msg>
<msg timestamp="20190719 23:00:29.614" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.615" starttime="20190719 23:00:29.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:29.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.615" starttime="20190719 23:00:29.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.616" level="INFO">To JSON using : content={"message":"Invalid endpoint"} </msg>
<msg timestamp="20190719 23:00:29.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.616" level="INFO">${response_data} = {u'message': u'Invalid endpoint'}</msg>
<status status="PASS" endtime="20190719 23:00:29.616" starttime="20190719 23:00:29.616"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>Invalid endpoint</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.617" starttime="20190719 23:00:29.617"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.618" starttime="20190719 23:00:29.617"></status>
</kw>
<doc>Testing the a invalid endpoint</doc>
<tags>
<tag>GET</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.619" critical="yes" starttime="20190719 23:00:29.596"></status>
</test>
<test id="s1-s1-t7" name="TC_007_POST_INVALID_MESSAGE">
<kw type="setup" name="Create greeting">
<doc>Used to create a fake entry in the service in order to test the DELETE and PUT endpoints</doc>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.625" level="INFO">Post Request using : alias=api, uri=greeting/1000, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:29.625" starttime="20190719 23:00:29.621"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.625" starttime="20190719 23:00:29.620"></status>
</kw>
<kw name="Form data">
<doc>Creates a dictionary with the ${info} passed as argument</doc>
<arguments>
<arg>Olá</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>message=${info}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.627" level="INFO">&amp;{data} = { message=Olá }</msg>
<status status="PASS" endtime="20190719 23:00:29.628" starttime="20190719 23:00:29.627"></status>
</kw>
<msg timestamp="20190719 23:00:29.628" level="INFO">&amp;{data} = { message=Olá }</msg>
<status status="PASS" endtime="20190719 23:00:29.628" starttime="20190719 23:00:29.626"></status>
</kw>
<kw name="Form headers">
<doc>Creates a dictionary with the headers needed for the requests</doc>
<assign>
<var>&amp;{headers}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/x-www-form-urlencoded</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.633" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.633" starttime="20190719 23:00:29.632"></status>
</kw>
<msg timestamp="20190719 23:00:29.633" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.633" starttime="20190719 23:00:29.631"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.638" level="INFO">Post Request using : alias=api, uri=greeting, data=message=Ol%C3%A1, headers={u'Content-Type': u'application/x-www-form-urlencoded'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.638" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.638" starttime="20190719 23:00:29.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:29.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.639" starttime="20190719 23:00:29.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.640" level="INFO">To JSON using : content={"message":"Message contains invalid chars"} </msg>
<msg timestamp="20190719 23:00:29.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.640" level="INFO">${response_data} = {u'message': u'Message contains invalid chars'}</msg>
<status status="PASS" endtime="20190719 23:00:29.640" starttime="20190719 23:00:29.639"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>Message contains invalid chars</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.641" starttime="20190719 23:00:29.640"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.642" starttime="20190719 23:00:29.641"></status>
</kw>
<doc>Testing the a invalid message with POST should return a 400 status code</doc>
<tags>
<tag>POST</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.643" critical="yes" starttime="20190719 23:00:29.619"></status>
</test>
<test id="s1-s1-t8" name="TC_008_PUT_INVALID_MESSAGE">
<kw type="setup" name="Create greeting">
<doc>Used to create a fake entry in the service in order to test the DELETE and PUT endpoints</doc>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.650" level="INFO">Post Request using : alias=api, uri=greeting/1000, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:29.651" starttime="20190719 23:00:29.645"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.651" starttime="20190719 23:00:29.644"></status>
</kw>
<kw name="Form data">
<doc>Creates a dictionary with the ${info} passed as argument</doc>
<arguments>
<arg>olá</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>message=${info}</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.655" level="INFO">&amp;{data} = { message=olá }</msg>
<status status="PASS" endtime="20190719 23:00:29.655" starttime="20190719 23:00:29.654"></status>
</kw>
<msg timestamp="20190719 23:00:29.656" level="INFO">&amp;{data} = { message=olá }</msg>
<status status="PASS" endtime="20190719 23:00:29.656" starttime="20190719 23:00:29.654"></status>
</kw>
<kw name="Form headers">
<doc>Creates a dictionary with the headers needed for the requests</doc>
<assign>
<var>&amp;{headers}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/x-www-form-urlencoded</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.657" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.657" starttime="20190719 23:00:29.656"></status>
</kw>
<msg timestamp="20190719 23:00:29.658" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.658" starttime="20190719 23:00:29.656"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>greeting/${testID}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.667" level="INFO">Put Request using : alias=api, uri=greeting/1000, data=message=ol%C3%A1,                     headers={u'Content-Type': u'application/x-www-form-urlencoded'}, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.668" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.668" starttime="20190719 23:00:29.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:29.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.669" starttime="20190719 23:00:29.668"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.669" level="INFO">To JSON using : content={"message":"Message contains invalid chars"} </msg>
<msg timestamp="20190719 23:00:29.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.669" level="INFO">${response_data} = {u'message': u'Message contains invalid chars'}</msg>
<status status="PASS" endtime="20190719 23:00:29.670" starttime="20190719 23:00:29.669"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>Message contains invalid chars</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.670" starttime="20190719 23:00:29.670"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.673" starttime="20190719 23:00:29.670"></status>
</kw>
<doc>Testing the a invalid message with PUT should return a 400 status code</doc>
<tags>
<tag>PUT</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.673" critical="yes" starttime="20190719 23:00:29.643"></status>
</test>
<kw type="teardown" name="Stop Log" library="log">
<status status="PASS" endtime="20190719 23:00:29.678" starttime="20190719 23:00:29.674"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.678" starttime="20190719 23:00:29.167"></status>
</suite>
<suite source="/home/diogo/Documents/docker/restapi-java-docker/tests/T_002_USER.robot" id="s1-s2" name="T 002 USER">
<kw type="setup" name="Initiate Session">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>api</arg>
<arg>${BASE_URL}</arg>
</arguments>
<msg timestamp="20190719 23:00:29.687" level="INFO">Creating Session using : alias=api, url=http://localhost:5000/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190719 23:00:29.688" starttime="20190719 23:00:29.687"></status>
</kw>
<kw name="Start Log" library="log">
<status status="PASS" endtime="20190719 23:00:29.690" starttime="20190719 23:00:29.688"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:29.690" starttime="20190719 23:00:29.686"></status>
</kw>
<test id="s1-s2-t1" name="TC_001_POST_USER">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{users}</var>
</assign>
<msg timestamp="20190719 23:00:29.692" level="INFO">@{users} = [ ]</msg>
<status status="PASS" endtime="20190719 23:00:29.692" starttime="20190719 23:00:29.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.693" level="INFO">&amp;{headers} = { Content-Type=application/json }</msg>
<status status="PASS" endtime="20190719 23:00:29.693" starttime="20190719 23:00:29.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=Diogo</arg>
<arg>birthDate=24-09-1999</arg>
<arg>city=Coimbra</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.694" level="INFO">&amp;{data} = { name=Diogo | birthDate=24-09-1999 | city=Coimbra }</msg>
<status status="PASS" endtime="20190719 23:00:29.694" starttime="20190719 23:00:29.693"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${users}</arg>
<arg>${data}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.695" starttime="20190719 23:00:29.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=Breno</arg>
<arg>birthDate=1999-09-24</arg>
<arg>city=Viseu</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.696" level="INFO">&amp;{data} = { name=Breno | birthDate=1999-09-24 | city=Viseu }</msg>
<status status="PASS" endtime="20190719 23:00:29.696" starttime="20190719 23:00:29.695"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${users}</arg>
<arg>${data}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.697" starttime="20190719 23:00:29.696"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user</arg>
<arg>data=${users}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.822" level="INFO">Post Request using : alias=api, uri=user, data=[{"name": "Diogo", "birthDate": "24-09-1999", "city": "Coimbra"}, {"name": "Breno", "birthDate": "1999-09-24", "city": "Viseu"}], headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.822" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.822" starttime="20190719 23:00:29.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.823" starttime="20190719 23:00:29.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.823" level="INFO">To JSON using : content={"message":"Were added 2 users."} </msg>
<msg timestamp="20190719 23:00:29.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.824" level="INFO">${response_data} = {u'message': u'Were added 2 users.'}</msg>
<status status="PASS" endtime="20190719 23:00:29.824" starttime="20190719 23:00:29.823"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>Were added 2 users.</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.824" starttime="20190719 23:00:29.824"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.827" starttime="20190719 23:00:29.825"></status>
</kw>
<doc>Testing the endpoint POST /user that sends a JSONArray
with users info to be added to mysql db</doc>
<tags>
<tag>POST</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.827" critical="yes" starttime="20190719 23:00:29.690"></status>
</test>
<test id="s1-s2-t2" name="TC_002_POST_USER_TEST_BIRTHDATE">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{users}</var>
</assign>
<msg timestamp="20190719 23:00:29.830" level="INFO">@{users} = [ ]</msg>
<status status="PASS" endtime="20190719 23:00:29.830" starttime="20190719 23:00:29.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.831" level="INFO">&amp;{headers} = { Content-Type=application/json }</msg>
<status status="PASS" endtime="20190719 23:00:29.831" starttime="20190719 23:00:29.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=Diogo</arg>
<arg>birthDate=24/1999-1999</arg>
<arg>city=Coimbra</arg>
</arguments>
<assign>
<var>&amp;{data}</var>
</assign>
<msg timestamp="20190719 23:00:29.832" level="INFO">&amp;{data} = { name=Diogo | birthDate=24/1999-1999 | city=Coimbra }</msg>
<status status="PASS" endtime="20190719 23:00:29.832" starttime="20190719 23:00:29.831"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${users}</arg>
<arg>${data}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.832" starttime="20190719 23:00:29.832"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user</arg>
<arg>data=${users}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.839" level="INFO">Post Request using : alias=api, uri=user, data=[{"name": "Diogo", "birthDate": "24/1999-1999", "city": "Coimbra"}], headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.840" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.840" starttime="20190719 23:00:29.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:29.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.841" starttime="20190719 23:00:29.840"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.841" level="INFO">To JSON using : content={"message":"Params don't follow the rules"} </msg>
<msg timestamp="20190719 23:00:29.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.841" level="INFO">${response_data} = {u'message': u"Params don't follow the rules"}</msg>
<status status="PASS" endtime="20190719 23:00:29.842" starttime="20190719 23:00:29.841"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>Params don't follow the rules</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.842" starttime="20190719 23:00:29.842"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.845" starttime="20190719 23:00:29.843"></status>
</kw>
<doc>Testing the endpoint POST /user that sends a JSONArray
with users info to be added to mysql db
Testing if it returns a 400 in case date is not in the correct format
YYYY-MM-DD or DD-MM-YYYY</doc>
<tags>
<tag>POST</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.845" critical="yes" starttime="20190719 23:00:29.828"></status>
</test>
<test id="s1-s2-t3" name="TC_003_POST_USER_EMPTY_ARRAY">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{users}</var>
</assign>
<msg timestamp="20190719 23:00:29.847" level="INFO">@{users} = [ ]</msg>
<status status="PASS" endtime="20190719 23:00:29.847" starttime="20190719 23:00:29.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.848" level="INFO">&amp;{headers} = { Content-Type=application/json }</msg>
<status status="PASS" endtime="20190719 23:00:29.848" starttime="20190719 23:00:29.847"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user</arg>
<arg>data=${users}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.855" level="INFO">Post Request using : alias=api, uri=user, data=[], headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.856" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.856" starttime="20190719 23:00:29.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:29.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.857" starttime="20190719 23:00:29.856"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.858" level="INFO">To JSON using : content={"message":"User array is empty"} </msg>
<msg timestamp="20190719 23:00:29.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.859" level="INFO">${response_data} = {u'message': u'User array is empty'}</msg>
<status status="PASS" endtime="20190719 23:00:29.859" starttime="20190719 23:00:29.858"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>User array is empty</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.860" starttime="20190719 23:00:29.859"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.861" starttime="20190719 23:00:29.860"></status>
</kw>
<doc>Testing the endpoint POST /user that sends a JSONArray
with users info to be added to mysql db
Testing if it returns a 400 in case date the JSONArray is empty
[]</doc>
<tags>
<tag>POST</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.861" critical="yes" starttime="20190719 23:00:29.845"></status>
</test>
<test id="s1-s2-t4" name="TC_004_POST_USER_WRONG_CONTENT-Type">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{users}</var>
</assign>
<msg timestamp="20190719 23:00:29.866" level="INFO">@{users} = [ ]</msg>
<status status="PASS" endtime="20190719 23:00:29.866" starttime="20190719 23:00:29.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/x-www-form-urlencoded</arg>
</arguments>
<assign>
<var>&amp;{headers}</var>
</assign>
<msg timestamp="20190719 23:00:29.884" level="INFO">&amp;{headers} = { Content-Type=application/x-www-form-urlencoded }</msg>
<status status="PASS" endtime="20190719 23:00:29.884" starttime="20190719 23:00:29.883"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user</arg>
<arg>data=${users}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.894" level="INFO">Post Request using : alias=api, uri=user, data=[], headers={u'Content-Type': u'application/x-www-form-urlencoded'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:29.894" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.894" starttime="20190719 23:00:29.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:29.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.895" starttime="20190719 23:00:29.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:29.896" level="INFO">To JSON using : content={"message":"Only accepts content of application/json type"} </msg>
<msg timestamp="20190719 23:00:29.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:29.896" level="INFO">${response_data} = {u'message': u'Only accepts content of application/json type'}</msg>
<status status="PASS" endtime="20190719 23:00:29.896" starttime="20190719 23:00:29.895"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>Only accepts content of application/json type</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.898" starttime="20190719 23:00:29.896"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.908" starttime="20190719 23:00:29.900"></status>
</kw>
<doc>Testing the endpoint POST /user that sends a JSONArray
with users info to be added to mysql db
Testing if it returns a 400 in case Content type != application/json</doc>
<tags>
<tag>POST</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.908" critical="yes" starttime="20190719 23:00:29.861"></status>
</test>
<test id="s1-s2-t5" name="TC_005_GET_ALL_USER">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:29.971" level="INFO">Get Request using : alias=api, uri=user, headers=None json=None</msg>
<msg timestamp="20190719 23:00:29.972" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.972" starttime="20190719 23:00:29.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:29.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:29.973" starttime="20190719 23:00:29.972"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:29.975" starttime="20190719 23:00:29.973"></status>
</kw>
<doc>Testing the endpoint GET /user that returns all users inside the db</doc>
<tags>
<tag>GET</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:29.976" critical="yes" starttime="20190719 23:00:29.908"></status>
</test>
<test id="s1-s2-t6" name="TC_006_DELETE_USER">
<kw type="setup" name="Create user">
<doc>Used to create a fake entry in the db in order to leave the server clean</doc>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user/${testID}</arg>
</arguments>
<msg timestamp="20190719 23:00:30.027" level="INFO">Post Request using : alias=api, uri=user/1000, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20190719 23:00:30.027" starttime="20190719 23:00:29.978"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:30.028" starttime="20190719 23:00:29.978"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user/${testID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:30.090" level="INFO">Delete Request using : alias=api, uri=user/1000, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:30.090" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.091" starttime="20190719 23:00:30.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:30.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.093" starttime="20190719 23:00:30.093"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:30.096" level="INFO">To JSON using : content={"message":"User with id 1000 deleted with success from DB."} </msg>
<msg timestamp="20190719 23:00:30.096" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:30.096" level="INFO">${response_data} = {u'message': u'User with id 1000 deleted with success from DB.'}</msg>
<status status="PASS" endtime="20190719 23:00:30.096" starttime="20190719 23:00:30.095"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>User with id ${testID} deleted with success from DB.</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.098" starttime="20190719 23:00:30.097"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.099" starttime="20190719 23:00:30.098"></status>
</kw>
<doc>Testing the endpoint DELETE /user/:id that deletes the user with :id</doc>
<tags>
<tag>DELETE</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:30.099" critical="yes" starttime="20190719 23:00:29.976"></status>
</test>
<test id="s1-s2-t7" name="TC_007_DELETE_USER_WRONG_ID">
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user/50000</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:30.174" level="INFO">Delete Request using : alias=api, uri=user/50000, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190719 23:00:30.174" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.174" starttime="20190719 23:00:30.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:30.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.175" starttime="20190719 23:00:30.174"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:30.176" level="INFO">To JSON using : content={"message":"ID doesn't exist on DB."} </msg>
<msg timestamp="20190719 23:00:30.176" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:30.176" level="INFO">${response_data} = {u'message': u"ID doesn't exist on DB."}</msg>
<status status="PASS" endtime="20190719 23:00:30.176" starttime="20190719 23:00:30.175"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>ID doesn't exist on DB.</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.177" starttime="20190719 23:00:30.176"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.178" starttime="20190719 23:00:30.177"></status>
</kw>
<doc>Testing the endpoint DELETE /user/:id that deletes the user with :id
but using a wrong ID</doc>
<tags>
<tag>DELETE</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:30.178" critical="yes" starttime="20190719 23:00:30.099"></status>
</test>
<test id="s1-s2-t8" name="TC_008_GET_USER">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user/${ID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:30.228" level="INFO">Get Request using : alias=api, uri=user/1, headers=None json=None</msg>
<msg timestamp="20190719 23:00:30.228" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.228" starttime="20190719 23:00:30.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190719 23:00:30.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.230" starttime="20190719 23:00:30.229"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.237" starttime="20190719 23:00:30.236"></status>
</kw>
<doc>Testing the endpoint GET /user/:id that returns the user with id=:id</doc>
<tags>
<tag>GET</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:30.238" critical="yes" starttime="20190719 23:00:30.178"></status>
</test>
<test id="s1-s2-t9" name="TC_009_GET_USER_WRONG_ID">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api</arg>
<arg>user/50000</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190719 23:00:30.301" level="INFO">Get Request using : alias=api, uri=user/50000, headers=None json=None</msg>
<msg timestamp="20190719 23:00:30.302" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.302" starttime="20190719 23:00:30.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20190719 23:00:30.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190719 23:00:30.303" starttime="20190719 23:00:30.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${response_data}</var>
</assign>
<msg timestamp="20190719 23:00:30.303" level="INFO">To JSON using : content={"message":"ID doesn't exist on DB."} </msg>
<msg timestamp="20190719 23:00:30.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20190719 23:00:30.304" level="INFO">${response_data} = {u'message': u"ID doesn't exist on DB."}</msg>
<status status="PASS" endtime="20190719 23:00:30.304" starttime="20190719 23:00:30.303"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${response_data}</arg>
<arg>ID doesn't exist on DB.</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.304" starttime="20190719 23:00:30.304"></status>
</kw>
<kw type="teardown" name="Log Test Case" library="log">
<arguments>
<arg>${TEST NAME}</arg>
<arg>${TEST STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190719 23:00:30.309" starttime="20190719 23:00:30.306"></status>
</kw>
<doc>Testing the endpoint GET /user/:id with id that doesn't exist on db</doc>
<tags>
<tag>GET</tag>
</tags>
<status status="PASS" endtime="20190719 23:00:30.310" critical="yes" starttime="20190719 23:00:30.238"></status>
</test>
<kw type="teardown" name="Stop Log" library="log">
<status status="PASS" endtime="20190719 23:00:30.314" starttime="20190719 23:00:30.312"></status>
</kw>
<status status="PASS" endtime="20190719 23:00:30.314" starttime="20190719 23:00:29.680"></status>
</suite>
<status status="PASS" endtime="20190719 23:00:30.323" starttime="20190719 23:00:29.134"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="17">Critical Tests</stat>
<stat fail="0" pass="17">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="2">DELETE</stat>
<stat fail="0" pass="1">DELETE${info}</stat>
<stat fail="0" pass="6">GET</stat>
<stat fail="0" pass="6">POST</stat>
<stat fail="0" pass="2">PUT</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="T 001 GREETING &amp; T 002 USER" pass="17">T 001 GREETING &amp; T 002 USER</stat>
<stat fail="0" id="s1-s1" name="T 001 GREETING" pass="8">T 001 GREETING &amp; T 002 USER.T 001 GREETING</stat>
<stat fail="0" id="s1-s2" name="T 002 USER" pass="9">T 001 GREETING &amp; T 002 USER.T 002 USER</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
